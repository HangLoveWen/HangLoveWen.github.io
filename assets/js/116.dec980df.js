(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{513:function(e,s,p){"use strict";p.r(s);var t=p(2),v=Object(t.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("1.安装JWT相关的包")]),e._v(" "),s("p",[e._v("运行如下命令，安装如下两个JWT相关的包：")]),e._v(" "),s("p",[s("code",[e._v("npm install jsonwebtoken express-jwt")])]),e._v(" "),s("p",[e._v("其中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("jsonwebtoken用于生成JWT字符串\n\nexpress-jwt用于将JWT字符串解析还原成JSON对象\n")])])]),s("p",[e._v("2.导入JWT相关的包")]),e._v(" "),s("p",[e._v("使用require()函数，分别导入JWT相关的两个包：")]),e._v(" "),s("p",[s("code",[e._v("const jwt=require('jsonwebtoken')")])]),e._v(" "),s("p",[s("code",[e._v("const expressjwt=require('express-jwt')")])]),e._v(" "),s("p",[s("code",[e._v("const express=require('express')")])]),e._v(" "),s("p",[s("code",[e._v("const app =express()")])]),e._v(" "),s("p",[s("code",[e._v("app.use(jwt,expressjwt)")])]),e._v(" "),s("p",[s("code",[e._v("app.listen(80,()=>{")])]),e._v(" "),s("p",[s("code",[e._v("console.log('server running at http://localhost；80')")])]),e._v(" "),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[e._v("3.定义seret密钥")]),e._v(" "),s("p",[e._v("为了保证JWT字符串的安全性，防止JWT字符串字啊网络传输过程中被别人破解，我们需要专门认定一个用于加密和解密的seret密钥：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("1.当生成JWT字符串的时候，需要使用seret密钥对用户信息进行加密，最终得到加密好的JWT字符串\n\n2.当吧JWT字符串解析还原成JSON对象的时候，需要使用secret密钥进行解密\n")])])]),s("p",[s("code",[e._v("const seret='ithema NO1 <>'")])]),e._v(" "),s("p",[e._v("4.在登录成功后生成JWT字符串")]),e._v(" "),s("p",[e._v("调用jsonwebtoken包提供的sign()防腐漆，将用户信息加密成JWT字符串，响应给客户端：")]),e._v(" "),s("p",[s("code",[e._v("const jwt=require('jsonwebtoken')")])]),e._v(" "),s("p",[s("code",[e._v("const expressjwt=require('express-jwt')")])]),e._v(" "),s("p",[s("code",[e._v("const express=require('express')")])]),e._v(" "),s("p",[s("code",[e._v("const app =express()")])]),e._v(" "),s("p",[s("code",[e._v("app.use(jwt,expressjwt)")])]),e._v(" "),s("p",[s("code",[e._v("const secretKey='ithema NO1 <>'")])]),e._v(" "),s("p",[s("code",[e._v("app.post('/login',(req,res)=>{")])]),e._v(" "),s("p",[s("code",[e._v("const userinfo=req.body")])]),e._v(" "),s("p",[s("code",[e._v("if(userinfo.username!==\"admin\"||userinfo.password!=='000000'){")])]),e._v(" "),s("p",[s("code",[e._v("return res.send({status:400,msg:'登录失败'})")])]),e._v(" "),s("p",[s("code",[e._v("}")])]),e._v(" "),s("p",[s("code",[e._v("const tokenstr=jwt.sign(username:userinfo.username,secretKey,{expiresIn:'30s'})")])]),e._v(" "),s("p",[s("code",[e._v("res.send({status:400,msg:'登陆成功',token:tokenstr})")])]),e._v(" "),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[s("code",[e._v("app.listen(80,()=>{")])]),e._v(" "),s("p",[s("code",[e._v("console.log('server running at http://localhost；80')")])]),e._v(" "),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[e._v("5.将JWT字符串还原为JSON对象")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://s1.imagehub.cc/images/2023/02/01/83022f79c8fffc9fb5e135616f68220b.png",alt:"83022f79c8fffc9fb5e135616f68220b.png"}})]),e._v(" "),s("p",[s("code",[e._v("app.use(expressjwt.expressjwt({secret: secretKey, algorithms: ['HS256']}).unless({path: [/^\\/api\\//]}))")])]),e._v(" "),s("p",[e._v("6.使用req.user获取用户信息")]),e._v(" "),s("p",[e._v("当express-jwt这个中间件配置成功后，即可在那些有权限的接口中，使用req.user对象，来访问JWT字符串中解析出来的用户信息，示例代码如下：")]),e._v(" "),s("p",[s("code",[e._v("app.use(expressjwt.expressjwt({secret: secretKey, algorithms: ['HS256']}).unless({path: [/^\\/api\\//]}))")])]),e._v(" "),s("p",[s("code",[e._v("app.get('/admin/getinfo',(req,res)=>{")])]),e._v(" "),s("p",[s("code",[e._v("console.log(req.auth)")])]),e._v(" "),s("p",[s("code",[e._v("res.send({")])]),e._v(" "),s("p",[s("code",[e._v("status:200,")])]),e._v(" "),s("p",[s("code",[e._v("msg:'获取用户信息成功',")])]),e._v(" "),s("p",[s("code",[e._v("data: req.auth")])]),e._v(" "),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[e._v("7.捕获解析JWT失败后产生的错误")]),e._v(" "),s("p",[e._v("当使用express-jwt解析token字符串时，如果客户端发送过来的token字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行。我们可以通过express的错误中间件，捕获这个错误并进行相关的处理，示例代码如下：")]),e._v(" "),s("p",[s("code",[e._v("app.use((err,req,res,next)=>{")])]),e._v(" "),s("p",[s("code",[e._v("if(err.name==='UnauthorizedError'){")])]),e._v(" "),s("p",[s("code",[e._v("return res.send({status:401,msg:'无效的token'})")])]),e._v(" "),s("p",[s("code",[e._v("}")])]),e._v(" "),s("p",[s("code",[e._v("res.send({status:500,msg:'未知错误'})")])]),e._v(" "),s("p",[s("code",[e._v("})")])])])}),[],!1,null,null,null);s.default=v.exports}}]);