(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{424:function(v,_,e){"use strict";e.r(_);var n=e(2),a=Object(n.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[v._v("#")]),v._v(" 简介")]),v._v(" "),_("p",[v._v("正则表达式是由一些具有特殊含义的字符组成的字符串，多用于查找、替换符合规则的字符串。在表单验证、Url 映射等处都会经常用到。")]),v._v(" "),_("h3",{attrs:{id:"分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[v._v("#")]),v._v(" 分类")]),v._v(" "),_("h4",{attrs:{id:"一、元字符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、元字符"}},[v._v("#")]),v._v(" 一、元字符")]),v._v(" "),_("p",[v._v("元字符：即为有特定含义的字符，常见的元字符如下")]),v._v(" "),_("p",[v._v("常用的元字符\n代码 说明\n. 匹配除换行符以外的任意字符\n\\w 匹配字母或数字或下划线或汉字\n\\s 匹配任意的空白符\n\\d 匹配数字\n\\b 匹配单词的开始或结束\n^ 匹配字符串的开始（在集合字符里[^a]表示非（不匹配）的意思\n$ 匹配字符串的结束\n详解和示例：")]),v._v(" "),_("p",[v._v("（1）. 匹配任何任意字符 例如 . 可以匹配 1，n，*，+，- ,等")]),v._v(" "),_("p",[v._v("（2）\\d\\w\\s 匹配第一个字符为数字，第二个字符为字母或数字、或下划线或汉字，第三字符为空格的字符串 例如：11 ，2a , 1_")]),v._v(" "),_("p",[v._v("（3）^\\d\\d\\d$ 匹配三个全部都为数字的字符串 例如： 123,456,789")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("还可以用于验证输入的字符串是否符合qq（身份证号）的验证 ：\n\n例如：^\\d{8}$ 匹配8位数字的qq号，^\\d{15}&匹配15位均为数字的身份证号\n")])])]),_("p",[v._v("（4）\\bOlive\\b 匹配单词 Olive 例如： I Love Oliver and Olive .这个时候返回的是 Olive 而不是 Oliver,因为\\b....\\b 返回的匹配的单词")]),v._v(" "),_("h4",{attrs:{id:"二、反义字符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、反义字符"}},[v._v("#")]),v._v(" 二、反义字符")]),v._v(" "),_("p",[v._v("反义字符：多用于查找除某个字符以外其他任意字符均可以的情况")]),v._v(" "),_("p",[v._v("常用的反义字符如下：")]),v._v(" "),_("p",[v._v("常用的反义字符\n代码/语法 说明\n\\W 匹配任意不是字母，数字，下划线，汉字的字符\n\\S 匹配任意不是空白符的字符\n\\D 匹配任意非数字的字符\n\\B 匹配不是单词开头或结束的位置\n[^x] 匹配除了 x 以外的任意字符\n[^aeiou] 匹配除了 aeiou 这几个字母以外的任意字符\n详解和示例：")]),v._v(" "),_("p",[v._v("（1）\\W 匹配除字母、数字、下划线、汉字以为的字符形如 +，-，*")]),v._v(" "),_("p",[v._v("（2）\\S 匹配除空格以外的任意字符形如：1，* ，）")]),v._v(" "),_("p",[v._v("（3）[^abcde]匹配除 abcde 以为的其他字符 如 e，f，g，h")]),v._v(" "),_("h4",{attrs:{id:"三、限定字符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、限定字符"}},[v._v("#")]),v._v(" 三、限定字符")]),v._v(" "),_("p",[v._v("限定字符多用于重复匹配次数")]),v._v(" "),_("p",[v._v("常用的限定字符如下")]),v._v(" "),_("p",[v._v("常用的限定符\n代码/语法 说明")]),v._v(" "),_("ul",[_("li",[v._v("重复零次或更多次")])]),v._v(" "),_("ul",[_("li",[v._v("重复一次或更多次\n? 重复零次或一次\n{n} 重复 n 次\n{n,} 重复 n 次或更多次\n{n,m} 重复 n 到 m 次\n详解和示例：")])]),v._v(" "),_("p",[v._v("（1）\\d* 匹配重复 0 次或多次数字 例如:可能为空 或 任意数字 （2,3。。。。）")]),v._v(" "),_("p",[v._v("（2）\\d+ 匹配重复 1 次或多次数字 例如:可能为 1 个或多个数字 1,23,234,2345，........")]),v._v(" "),_("p",[v._v("（3）\\d? 匹配重复次个或者一次数字 例如：可能为空或者任意的一个数字（1,2，。。。）")]),v._v(" "),_("p",[v._v("（4）\\d{8}匹配重复 8 次数字 例如：123456768")]),v._v(" "),_("p",[v._v("（5）\\d{4,}匹配重复至少 4 次数字 例如：1234,12345,124244,。。。。。")]),v._v(" "),_("p",[v._v("（6）^\\d{8,11}$ 匹配重复 8-11 次数字 例如：12345678,123456789,1234567890,12345678901")]),v._v(" "),_("h4",{attrs:{id:"四、转义字符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、转义字符"}},[v._v("#")]),v._v(" 四、转义字符")]),v._v(" "),_("p",[v._v("在实际的开发中，可能会遇到要比配元字符的情况，这个时候就需要进行字符转义，如元字符 . * \\ 需要转换为. * \\")]),v._v(" "),_("p",[v._v("例如： 需要匹配 qq 邮箱 \\d{8,}+qq+.+com 在这里的. 就需要加斜杠")]),v._v(" "),_("p",[v._v("五、字符分枝")]),v._v(" "),_("p",[v._v("字符分枝多用于满足不同情况的选择，用“|”将不同的条件分割开来，比如有些固定电话区号有三位，有些有四位，这个时候可以采用字符分枝")]),v._v(" "),_("p",[v._v("例如：\\d{3}-\\d{8}|\\d{4}-\\d{8} 可以匹配两种不同长度区号的固定电话")]),v._v(" "),_("p",[v._v("下边的 IP 地址正则表达式也有用到字符分枝")]),v._v(" "),_("h4",{attrs:{id:"六、字符分组"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六、字符分组"}},[v._v("#")]),v._v(" 六、字符分组")]),v._v(" "),_("p",[v._v("字符分组多用于将多个字符重复，主要通过使用小括号()来进行分组")]),v._v(" "),_("p",[v._v("形如：（\\d\\w){3} 重复匹配 3 次（\\d\\w)")]),v._v(" "),_("p",[v._v("常用于表示 IP 地址 形如： ((25[0-5]|2[0-4][0-9]|[0-1]\\d\\d).){3}(25[0-5]|2[0-4][0-9]|[0-1]\\d\\d)")]),v._v(" "),_("p",[v._v("解析：先把 IP 地址分为两部分一部分是 123.123.123. 另一部分是 123，又因 Ip 最大值为 255，所以先使用分组，然后在组里边再进行选择，组里也有三部分，0-199,200-249,250-255，分别和上述的表达是对应，最后还要注意分组之后还要加上一个.，因为是元字符所以要转义故加上. 然后再把这部分整体看做是一个组，重复三次，再加上仅有数字的一组也就是不带.的那一组即可完成 IP 地址的校验")]),v._v(" "),_("p",[v._v("常用分组语法")]),v._v(" "),_("p",[v._v("用分组语法\n分类 代码/语法 说明\n捕获 (exp) 匹配 exp,并捕获文本到自动命名的组里\n(?"),_("code",[v._v("<name>")]),v._v("exp) 匹配 exp,并捕获文本到名称为 name 的组里，也可以写成(?'name'exp)\n(?:exp) 匹配 exp,不捕获匹配的文本，也不给此分组分配组号\n零宽断言 (?=exp) 匹配 exp 前面的位置\n(?<=exp) 匹配 exp 后面的位置\n(?!exp) 匹配后面跟的不是 exp 的位置\n(?<!exp) 匹配前面不是 exp 的位置\n注释 (?#comment) 这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读")]),v._v(" "),_("h4",{attrs:{id:"七、懒惰匹配和贪婪匹配"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#七、懒惰匹配和贪婪匹配"}},[v._v("#")]),v._v(" 七、懒惰匹配和贪婪匹配")]),v._v(" "),_("p",[v._v("贪婪匹配：正则表达式中包含重复的限定符时，通常的行为是匹配尽可能多的字符。")]),v._v(" "),_("p",[v._v("懒惰匹配，有时候需要匹配尽可能少的字符。")]),v._v(" "),_("p",[v._v("例如： a.*b，它将会匹配最长的以 a 开始，以 b 结束的字符串。如果用它来搜索 aabab 的话，它会匹配整个字符串 aabab。但是我们此时可能需要匹配的是 ab 这样的话就需要用到懒惰匹配了。懒惰匹配会匹配尽可能少的字符")]),v._v(" "),_("p",[v._v("常用的懒惰匹配限定符如下")]),v._v(" "),_("p",[v._v("懒惰限定符\n代码/语法 说明\n*? 重复任意次，但尽可能少重复\n+? 重复 1 次或更多次，但尽可能少重复\n?? 重复 0 次或 1 次，但尽可能少重复\n{n,m}? 重复 n 到 m 次，但尽可能少重复\n{n,}? 重复 n 次以上，但尽可能少重复")]),v._v(" "),_("h4",{attrs:{id:"八、后向引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#八、后向引用"}},[v._v("#")]),v._v(" 八、后向引用")]),v._v(" "),_("p",[v._v("后向引用用于重复搜索前面某个分组匹配的文本。")]),v._v(" "),_("p",[v._v("使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为 1，第二个为 2，以此类推")]),v._v(" "),_("p",[v._v("示例：\\b(\\w+)\\b\\s+\\1\\b 可以用来匹配重复的单词，像 go go, 或者 kitty kitty。")]),v._v(" "),_("p",[v._v("这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\\b(\\w+)\\b)，这个单词会被捕获到编号为 1 的分组中，然后是 1 个或几个空白符(\\s+)，最后是分组 1 中捕获的内容（也就是前面匹配的那个单词）(\\1)。")]),v._v(" "),_("p",[v._v("你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?"),_("code",[v._v("<Word>")]),v._v("\\w+)(或者把尖括号换成'也行：(?'Word'\\w+)),这样就把\\w+的组名指定为 Word 了。要反向引用这个分组捕获的内容，你可以使用\\k "),_("code",[v._v("<Word>")]),v._v(",所以上一个例子也可以写成这样：\\b(?"),_("code",[v._v("<Word>")]),v._v("\\w+)\\b\\s+\\k "),_("code",[v._v("<Word>")]),v._v("\\b")]),v._v(" "),_("h4",{attrs:{id:"九、零宽断言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#九、零宽断言"}},[v._v("#")]),v._v(" 九、零宽断言")]),v._v(" "),_("p",[v._v("有时候需要查找某些匹配之前或之后的东西，这个时候就需要用到们像\\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言")]),v._v(" "),_("p",[v._v("(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式 exp。比如\\b\\w+(?=ing\\b)，匹配以 ing 结尾的单词的前面部分(除了 ing 以外的部分)，如查找 I'm singing while you're dancing.时，它会匹配 sing 和 danc。")]),v._v(" "),_("p",[v._v("(?<=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式 exp。比如(?<=\\bre)\\w+\\b 会匹配以 re 开头的单词的后半部分(除了 re 以外的部分)，例如在查找 reading a book 时，它匹配 ading。")]),v._v(" "),_("h4",{attrs:{id:"十、其他语法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十、其他语法"}},[v._v("#")]),v._v(" 十、其他语法")]),v._v(" "),_("p",[v._v(".NET 常用的处理选项\n名称 说明\nIgnoreCase(忽略大小写) 匹配时不区分大小写。\nMultiline(多行模式) 更改^和$$的精确含意是:匹配\\n之前的位置以及字符串结束前的位置.)\nSingleline(单行模式)\t更改.的含义，使它与每一个字符匹配（包括换行符\\n）。\nIgnorePatternWhitespace(忽略空白)\t忽略表达式中的非转义空白并启用由#标记的注释。\nExplicitCapture(显式捕获)\t仅捕获已被显式命名的组。\n其他语法\n代码/语法\t说明\n\\a\t报警字符(打印它的效果是电脑嘀一声)\n\\b\t通常是单词分界位置，但如果在字符类里使用代表退格\n\\t\t制表符，Tab\n\\r\t回车\n\\v\t竖向制表符\n\\f\t换页符\n\\n\t换行符\n\\e\tEscape\n\\0nn\tASCII代码中八进制代码为nn的字符\n\\xnn\tASCII代码中十六进制代码为nn的字符\n\\unnnn\tUnicode代码中十六进制代码为nnnn的字符\n\\cN\tASCII控制字符。比如\\cC代表Ctrl+C\n\\A\t字符串开头(类似^，但不受处理多行选项的影响)\n\\Z\t字符串结尾或行尾(不受处理多行选项的影响)\n\\z\t字符串结尾(类似$，但不受处理多行选项的影响)\n\\G 当前搜索的开头\n\\p{name} Unicode 中命名为 name 的字符类，例如\\p{IsGreek}\n(?>exp) 贪婪子表达式\n(?"),_("code",[v._v("<x>")]),v._v("-"),_("code",[v._v("<y>")]),v._v("exp) 平衡组\n(?im-nsx:exp) 在子表达式 exp 中改变处理选项\n(?im-nsx) 为表达式后面的部分改变处理选项\n(?(exp)yes|no) 把 exp 当作零宽正向先行断言，如果在这个位置能匹配，使用 yes 作为此组的表达式；否则使用 no\n(?(exp)yes) 同上，只是使用空表达式作为 no\n(?(name)yes|no) 如果命名为 name 的组捕获到了内容，使用 yes 作为表达式；否则使用 no\n(?(name)yes) 同上，只是使用空表达式作为 no")]),v._v(" "),_("h4",{attrs:{id:"十一、常用的实用正则表达式整理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十一、常用的实用正则表达式整理"}},[v._v("#")]),v._v(" 十一、常用的实用正则表达式整理")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v('只能输入数字："^[0-9]*$"。\n')])])]),_("p",[v._v('只能输入 n 位的数字："^"d{n}$"。')]),v._v(" "),_("p",[v._v('只能输入至少 n 位的数字："^"d{n,}$"。')]),v._v(" "),_("p",[v._v('只能输入 m~n 位的数字：。"^"d{m,n}$"')]),v._v(" "),_("p",[v._v('只能输入零和非零开头的数字："^(0|[1-9][0-9]*)$"。')]),v._v(" "),_("p",[v._v('只能输入有两位小数的正实数："^[0-9]+(.[0-9]{2})?$"。')]),v._v(" "),_("p",[v._v('只能输入有 1~3 位小数的正实数："^[0-9]+(.[0-9]{1,3})?$"。')]),v._v(" "),_("p",[v._v('只能输入非零的正整数："^"+?[1-9][0-9]*$"。')]),v._v(" "),_("p",[v._v('只能输入非零的负整数："^"-[1-9][]0-9"*$。')]),v._v(" "),_("p",[v._v('只能输入长度为 3 的字符："^.{3}$"。')]),v._v(" "),_("p",[v._v('只能输入由 26 个英文字母组成的字符串："^[A-Za-z]+$"。')]),v._v(" "),_("p",[v._v('只能输入由 26 个大写英文字母组成的字符串："^[A-Z]+$"。')]),v._v(" "),_("p",[v._v('只能输入由 26 个小写英文字母组成的字符串："^[a-z]+$"。')]),v._v(" "),_("p",[v._v('只能输入由数字和 26 个英文字母组成的字符串："^[A-Za-z0-9]+$"。')]),v._v(" "),_("p",[v._v('只能输入由数字、26 个英文字母或者下划线组成的字符串："^"w+$"。')]),v._v(" "),_("p",[v._v('验证用户密码："^[a-zA-Z]"w{5,17}$"正确格式为：以字母开头，长度在 6~18 之间，只能包含字符、数字和下划线。')]),v._v(" "),_("p",[v._v('验证是否含有^%&’,;=?$""等字符："[^%&’,;=?$"x22]+"。')]),v._v(" "),_("p",[v._v('只能输入汉字："^["u4e00-"u9fa5]{0,}$"')]),v._v(" "),_("p",[v._v('验证 Email 地址："^"w+([-+.]"w+)'),_("em",[v._v('@"w+([-.]"w+)')]),v._v('"."w+([-.]"w+)*$"。')]),v._v(" "),_("p",[v._v('验证 InternetURL："^http://(["w-]+".)+["w-]+(/["w-./?%&=]*)?$"。')]),v._v(" "),_("p",[v._v('验证电话号码："^("("d{3,4}-)|"d{3.4}-)?"d{7,8}$"正确格式为："XXX-XXXXXXX"、"XXXX- XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX"。')]),v._v(" "),_("p",[v._v('验证身份证号(15 位或 18 位数字)："^"d{15}|"d{18}$"。')]),v._v(" "),_("p",[v._v('验证一年的 12 个月："^(0?[1-9]|1[0-2])$"正确格式为："01"～"09"和"1"～"12"。')]),v._v(" "),_("p",[v._v('验证一个月的 31 天："^((0?[1-9])|((1|2)[0-9])|30|31)$"正确格式为;"01"～"09"和"1"～"31"。')]),v._v(" "),_("p",[v._v("利用正则表达式限制网页表单里的文本框输入内容：")]),v._v(" "),_("p",[v._v('用正则表达式限制只能输入中文：οnkeyup="value=value.replace(/[^"u4e00-"u9fa5] /g,’’)" onbeforepaste="clipboardData.setData(’text’,clipboardData.getData(’text’).replace(/[^"u4e00-"u9fa5]/g,’’))"')]),v._v(" "),_("p",[v._v('用正则表达式限制只能输入全角字符： οnkeyup="value=value.replace(/[^"uff00-"uffff]/g,’’)" onbeforepaste="clipboardData.setData(’text’,clipboardData.getData(’text’).replace(/[^"uff00-"uffff]/g,’’))"')]),v._v(" "),_("p",[v._v('用正则表达式限制只能输入数字：οnkeyup="value=value.replace(/[^"d]/g,’’) "onbeforepaste="clipboardData.setData(’text’,clipboardData.getData(’text’).replace(/[^"d]/g,’’))"')]),v._v(" "),_("p",[v._v('用正则表达式限制只能输入数字和英文：οnkeyup="value=value.replace(/["W]/g,’’) "onbeforepaste="clipboardData.setData(’text’,clipboardData.getData(’text’).replace(/[^"d]/g,’’))"')]),v._v(" "),_("p",[v._v("得用正则表达式从 URL 地址中提取文件名的 javascript 程序，如下结果为 page1")]),v._v(" "),_("p",[v._v('以下是引用片段：\ns="http://www.9499.net/page1.htm"\ns=s.replace(/(.'),_("em",[v._v('"/){0,}([^".]+).')]),v._v('/ig,"$2")\nalert(s)\n　　匹配双字节字符(包括汉字在内)：[^"x00-"xff]')]),v._v(" "),_("p",[v._v("应用：计算字符串的长度(一个双字节字符长度计 2，ASCII 字符计 1)")]),v._v(" "),_("p",[v._v('以下是引用片段：\nString.prototype.len=function(){return this.replace([^"x00-"xff]/g,"aa").length;}\n　　匹配空行的正则表达式："n["s| ]*"r')]),v._v(" "),_("p",[v._v("匹配 HTML 标记的正则表达式：/<(."),_("em",[v._v(")>.")]),v._v('<"/"1>|<(.*) "/>/')]),v._v(" "),_("p",[v._v('匹配首尾空格的正则表达式：(^"s*)|("s*$)')]),v._v(" "),_("p",[v._v('以下是引用片段：\nString.prototype.trim = function()\n{\nreturn this.replace(/(^"s*)|("s*$)/g, "");\n}\n　　利用正则表达式分解和转换 IP 地址：')]),v._v(" "),_("p",[v._v("下面是利用正则表达式匹配 IP 地址，并将 IP 地址转换成对应数值的 Javascript 程序：")]),v._v(" "),_("p",[v._v('以下是引用片段：\nfunction IP2V(ip)\n{\nre=/("d+)".("d+)".("d+)".("d+)/g //匹配 IP 地址的正则表达式\nif(re.test(ip))\n{\nreturn RegExp.$1'),_("em",[v._v("Math.pow(255,3))+RegExp.$2")]),v._v("Math.pow(255,2))+RegExp.$3"),_("em",[v._v("255+RegExp.$4")]),v._v('1\n}\nelse\n{\nthrow new Error("Not a valid IP address!")\n}\n}\n不过上面的程序如果不用正则表达式，而直接用 split 函数来分解可能更简单，程序如下：')]),v._v(" "),_("p",[v._v('以下是引用片段：\nvar ip="10.100.20.168"\nip=ip.split(".")\nalert("IP 值是："+(ip[0]'),_("em",[v._v("255")]),v._v("255*255+ip[1]"),_("em",[v._v("255")]),v._v("255+ip[2]*255+ip[3]*1))")])])}),[],!1,null,null,null);_.default=a.exports}}]);