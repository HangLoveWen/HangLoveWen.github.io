(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{436:function(a,s,e){"use strict";e.r(s);var n=e(2),r=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"difference-array-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#difference-array-values"}},[a._v("#")]),a._v(" "),s("code",[a._v("_.difference(array, [values])")])]),a._v(" "),s("p",[a._v("创建一个具有唯一 "),s("code",[a._v("array")]),a._v("值的数组，每个值不包含在其他给定的数组中。（注：即创建一个新数组，这个数组中的值，为第一个数字（"),s("code",[a._v("array")]),a._v(" 参数）排除了给定数组中的值。）该方法使用"),s("a",{attrs:{href:"http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("SameValueZero")]),s("OutboundLink")],1),a._v("做相等比较。结果值的顺序是由第一个数组中的顺序确定。")]),a._v(" "),s("p",[s("strong",[a._v("注意:")]),a._v(" 不像"),s("a",{attrs:{href:"https://www.lodashjs.com/docs/lodash.difference#pullAll",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("_.pullAll")]),s("OutboundLink")],1),a._v("，这个方法会返回一个新数组。")]),a._v(" "),s("h4",{attrs:{id:"引入版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引入版本"}},[a._v("#")]),a._v(" 引入版本")]),a._v(" "),s("p",[a._v("0.1.0")]),a._v(" "),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[a._v("#")]),a._v(" 参数")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("array")]),a._v(" "),s("em",[a._v("(Array)")]),a._v(" : 要检查的数组。")]),a._v(" "),s("li",[s("code",[a._v("[values]")]),a._v(" "),s("em",[a._v("(...Array)")]),a._v(" : 排除的值。")])]),a._v(" "),s("h4",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[a._v("#")]),a._v(" 返回值")]),a._v(" "),s("p",[s("em",[a._v("(Array)")]),a._v(" : 返回一个过滤值后的新数组。")]),a._v(" "),s("h4",{attrs:{id:"例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("difference")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// => [3, 1]")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h4",{attrs:{id:"源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[a._v("#")]),a._v(" 源码")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function difference(array, ...values) {\n  // 判断array是否是个类数组对象，如果是，则调用baseDifference方法处理，如果不是，则返回空数组\n  // 在调用baseDifference处理前，通过调用baseFatten方法将传入的values扁平化处理，关于baseFlatten扁平化处理的方法可见baseFlatten源码解析\n  // 从baseFlatten传入的参数可知：扁平化处理的层级为1，遍历values数组中的元素时每次都会调用isArrayLikeObject方法判断元素是否是类数组对象，且是严格模式下扁平化处理\n  // baseDifference方法的比较可见baseDifference源码解析\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : []\n}\n// baseDifference.js\n// baseDifference方法用来将array数组与values数组进行对比，将存在于两者之中的元素从array数组中剔除掉，array中剩余的值组成一个新数组返回\n// 对比的时候可以传入迭代器iteratee函数，array和values数组中的每个元素都会调用迭代器iteratee进行处理，然后chubaseDifference对比处理后的值\n// 对比的时候也可以传入比较器函数，在对比的时候调用comparator来比较array和values中每个元素，可以理解为比较器comparator定义了对比的规则，默认是看两个值是否相等\n// baseDifference方法会接收4个参数，依次为需要处理的array数组、用来对比的values数组、迭代器iteratee、比较器comparator\n// 迭代器iteratee是个function，array和values中的每个元素都需要调用该方法处理\nfunction baseDifference(array, values, iteratee, comparator) {\n  // includes用于储存判断数组中是否存在某个值的方法\n  let includes = arrayIncludes\n  // isCommon用于区分是普通对比，还是特殊对比\n  let isCommon = true\n  const result = []\n  const valuesLength = values.length\n\n  // array为空直接返回空数组\n  if (!array.length) {\n    return result\n  }\n  // 如果iteratee存在，则遍历values并对其中每个元素都调用iteratee方法\n  if (iteratee) {\n    values = map(values, (value) => iteratee(value))\n  }\n  // 如果存在比较器comparator，则为特殊对比，includes为arrayIncludesWith，其中arrayIncludesWith方法中就可以传入比较器comparator\n  if (comparator) {\n    includes = arrayIncludesWith\n    isCommon = false\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    // LARGE_ARRAY_SIZE是个常量，值为200，values长度超过200，则为特殊处理，includes为cacheHas\n    includes = cacheHas\n    isCommon = false\n    values = new SetCache(values)\n  }\n\n  // 遍历array数组，\n  outer:\n  for (let value of array) {\n    // 如果存在iteratee，用iteratee处理value\n    const computed = iteratee == null ? value : iteratee(value)\n\n    value = (comparator || value !== 0) ? value : 0\n    // 如果isCommon为true且computed === computed时遍历values，判断values中的元素是否有与computed相同的，如果没有则将当前value添加result中\n    if (isCommon && computed === computed) {\n      let valuesIndex = valuesLength\n      // 遍历values，当values中有元素与computed相同时，跳出当前array的循环，继续进行array的下一个循环，这样可以减少不必要的循环\n      // 只有当遍历完values中所有的元素后，如果都没有与computed相同的，说明当前value是array独有的，那么将value添加到result中\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer\n        }\n      }\n      result.push(value)\n    }\n    else if (!includes(values, computed, comparator)) {\n      // isCommon为false的条件是存在comparator或者values.length超过200，此时会调用includes进行判断\n      // 如果includes返回的结果为false，则表明在比较器comparator的规则下，values中包含computed，此时需将value添加到result中\n      result.push(value)\n    }\n  }\n  // 返回结果result\n  return result\n}\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br"),s("span",{staticClass:"line-number"},[a._v("58")]),s("br"),s("span",{staticClass:"line-number"},[a._v("59")]),s("br"),s("span",{staticClass:"line-number"},[a._v("60")]),s("br"),s("span",{staticClass:"line-number"},[a._v("61")]),s("br"),s("span",{staticClass:"line-number"},[a._v("62")]),s("br"),s("span",{staticClass:"line-number"},[a._v("63")]),s("br"),s("span",{staticClass:"line-number"},[a._v("64")]),s("br"),s("span",{staticClass:"line-number"},[a._v("65")]),s("br"),s("span",{staticClass:"line-number"},[a._v("66")]),s("br"),s("span",{staticClass:"line-number"},[a._v("67")]),s("br"),s("span",{staticClass:"line-number"},[a._v("68")]),s("br"),s("span",{staticClass:"line-number"},[a._v("69")]),s("br"),s("span",{staticClass:"line-number"},[a._v("70")]),s("br"),s("span",{staticClass:"line-number"},[a._v("71")]),s("br"),s("span",{staticClass:"line-number"},[a._v("72")]),s("br")])]),s("h4",{attrs:{id:"自我实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自我实现"}},[a._v("#")]),a._v(" 自我实现")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function differences(arr1, ...arrays) {\n\n    // 处理特别情况\n    if (arr1.length === 0) {\n        return []\n    } else if (arrays.length === 0) {\n        return [...arr1]\n    }\n\n    // 对数组进行过滤\n    return arr1.filter(item => {\n        let result = true // 假设当前元素在后面的所有数组都不存在\n        for (let index = 0; index < arrays.length; index++) {\n            const array = arrays[index];\n            if (array.indexOf(item) !== -1) {\n                result = false\n                break // 结束当前for循环\n            }\n        }\n        return result\n    })\n}\n\nlet a = differences([1, 3, 5, 7], [5, 8], [7, 3])\nconsole.log(a); // [ 1 ]\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br")])]),s("h4",{attrs:{id:"代码对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码对比"}},[a._v("#")]),a._v(" 代码对比")]),a._v(" "),s("ul",[s("li",[a._v("相较于自我实现，源码的代码考虑的更全面")])])])}),[],!1,null,null,null);s.default=r.exports}}]);