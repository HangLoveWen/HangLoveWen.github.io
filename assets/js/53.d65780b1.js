(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{450:function(a,s,n){"use strict";n.r(s);var e=n(2),t=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"intersectionby-arrays-iteratee-identity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intersectionby-arrays-iteratee-identity"}},[a._v("#")]),a._v(" "),s("code",[a._v("_.intersectionBy([arrays], [iteratee=_.identity])")])]),a._v(" "),s("p",[a._v("这个方法类似"),s("a",{attrs:{href:"https://www.lodashjs.com/docs/lodash.intersectionBy#intersection",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("_.intersection")]),s("OutboundLink")],1),a._v("，区别是它接受一个 "),s("code",[a._v("iteratee")]),a._v(" 调用每一个 "),s("code",[a._v("arrays")]),a._v("的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。iteratee 会传入一个参数： "),s("em",[a._v("(value)")]),a._v(" 。")]),a._v(" "),s("h4",{attrs:{id:"引入版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引入版本"}},[a._v("#")]),a._v(" 引入版本")]),a._v(" "),s("p",[a._v("4.0.0")]),a._v(" "),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[a._v("#")]),a._v(" 参数")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("[arrays]")]),a._v(" "),s("em",[a._v("(...Array)")]),a._v(" : 待检查的数组。")]),a._v(" "),s("li",[s("code",[a._v("[iteratee=_.identity]")]),a._v(" "),s("em",[a._v("(Array|Function|Object|string)")]),a._v(" : iteratee（迭代器）调用每个元素。")])]),a._v(" "),s("h4",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[a._v("#")]),a._v(" 返回值")]),a._v(" "),s("p",[s("em",[a._v("(Array)")]),a._v(" : 返回一个包含所有传入数组交集元素的新数组。")]),a._v(" "),s("h4",{attrs:{id:"例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("intersectionBy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4.3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("floor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// => [2.1]")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// The `_.property` iteratee shorthand.")]),a._v("\n_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("intersectionBy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"x"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// => [{ 'x': 1 }]")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("源码")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// intersectionBy.js\nfunction intersectionBy(...arrays) {\n  // 取arrays最后一个元素作为iteratee\n  let iteratee = last(arrays)\n  // 对入参进行处理，遍历参数数组arrays，并对其中每个元素调用castArrayLikeObject方法，使得arrays数组最终为一个由类数组组成的数组\n  const mapped = map(arrays, castArrayLikeObject)\n\n  // 判断iteratee与mapped最后一个元素是否相等，相等说明iteratee是个类数组，而不是一个函数，则让iteratee为undefined，否则，说明iteratee是个函数，应该将mapped最后一个元素去除掉\n  if (iteratee === last(mapped)) {\n    iteratee = undefined\n  } else {\n    mapped.pop()\n  }\n  // 当mapped的长度大于0且mapped数组的第一个元素与arrays数组中的第一个元素相等时，调用baseIntersection方法，否则返回空数组\n  // 为什么要进行mapped[0] === arrays[0]的判断？\n  // 因为intersection方法实际上是对传入的数组求交集元素，在得到交集元素后需要从第一个参数中这些交集元素返回，如果mapped[0]不等于arrays[0]，说明arrays[0]并不是个类数组对象，无法将交集元素从其中返回\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, iteratee)\n    : []\n}\n// baseIntersection.js\n// baseIntersection方法用于求arrays中每个数组的交集元素，最终返回的交集元素值均来自arrays的第一个元素\nfunction baseIntersection(arrays, iteratee, comparator) {\n  const includes = comparator ? arrayIncludesWith : arrayIncludes\n  // 获取arrays数组第一个参数的长度\n  const length = arrays[0].length\n  // 获取arrays数组的长度\n  const othLength = arrays.length\n  // 根据arrays数组的长度生成一个新数组caches\n  const caches = new Array(othLength)\n  const result = []\n\n  let array\n  let maxLength = Infinity\n  let othIndex = othLength\n\n  // 从后向前遍历arrays数组\n  while (othIndex--) {\n    // 获取当前索引在arrays数组中对应的数组对象\n    array = arrays[othIndex]\n    // 如果otherIndex索引大于0且iteratee函数存在，对当前数组对象调用map方法，也就是对当前数组对象中的每个元素调用iteratee方法，由其返回值组成一个新的数组返回\n    if (othIndex && iteratee) {\n      array = map(array, (value) => iteratee(value))\n    }\n    maxLength = Math.min(array.length, maxLength)\n    // 下面代码的意思就是什么时候使用缓存cache，有以下情况：\n    // 当comparator存在时不启用；\n    // comparator不存在，iteratee存在时启用\n    // comparator不存在，iteratee不存在，但是arrays数组第一个元素的长度大于等于120且遍历的当前array数组的长度大于等于120时启用\n    // 值得注意的是当othIndex为0时，caches[0]是一个空的SetCache实例，因为othIndex && array为0\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined\n  }\n  // array取arrays数组中第一个元素\n  array = arrays[0]\n\n  // index为-1，后面循环array数组时需要用到\n  let index = -1\n  // seen取caches数组中第一个元素\n  const seen = caches[0]\n\n  // 遍历arrays中的第一个数组元素也就是array数组，将array数组的每个元素与arrays数组中剩余的数组进行对比\n  outer:\n  while (++index < length && result.length < maxLength) {\n\n    // 获取array数组中当前index对应的值\n    let value = array[index]\n    // 如果iteratee存在，则用iteratee处理value，后续操作将使用处理后的结果，如果iteratee不存在，则使用value进行后续操作\n    const computed = iteratee ? iteratee(value) : value\n\n    // 如果comparator存在或value不等于0时，value取自身，否则让其为0处理\n    value = (comparator || value !== 0) ? value : 0\n    // 判断seen是否存在，存在的话，利用cacheHas方法判断seen数组中是否包含computed元素\n    // 如果seen不存在，则调用includes方法，判断返回数组result中是否包含computed\n    // cacheHas(seen, computed)判断的目的是防止array中有相同元素且该元素存在于所有数组中时，再走一遍对比过程\n    // includes(result, computed, comparator)判断的作用于seen中判断是否有computed一致\n    /*\n      不过在看这儿代码的时候有个疑问，那就是为什么seen中判断的时候用的是computed而result中判断的时候用value？\n    */\n\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength\n      // 从右向左循环遍历剩余arrays或caches数组，依次判断arrays或caches数组中的每个数组中是否包含computed，如果遇到有数组不包含，则退出arrays数组的遍历，继续进行外层循环（也就是arrays第一个数组元素的遍历）\n      // 遍历时使用--otherIndex，这样就不会遍历到arrays或caches数组的第一个元素，也就是array或seen数组\n      while (--othIndex) {\n        const cache = caches[othIndex]\n        // 遍历的时候先查看缓存是否存在，存在的话，使用caches[othIndex]，不存在的话使用arrays[othIndex]\n        // 遍历时，当前数组中不存在computed，则跳出当前的arrays或caches循环\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer\n        }\n      }\n      // 遍历完arrays或caches数组后，如果seen存在，则将computed添加到seen中\n      /*\n        为什么需要将computed添加到seen中呢？\n        这是因为上面再循环arrays时，就是否启用缓存有这么一句：caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120)) ?\n          new SetCache(othIndex && array) :\n          undefined\n        其中对于arrays的第一个元素，也就是otherIndex为0时，caches[0]是一个空的SetCache实例，其中没有元素值，\n        当遍历完arrays或caches数组没有跳出循环时，说明computed是存在于所有数组中，\n        于是将其添加到seen中，防止array数组中相同元素在走一遍对比过程\n      */\n      if (seen) {\n        seen.push(computed)\n      }\n      // 遍历完arrays数组之后，如果没有跳出循环，则表明computed在每个数组中都存在，于是将value添加到result中\n      result.push(value)\n    }\n  }\n  return result\n}\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br"),s("span",{staticClass:"line-number"},[a._v("58")]),s("br"),s("span",{staticClass:"line-number"},[a._v("59")]),s("br"),s("span",{staticClass:"line-number"},[a._v("60")]),s("br"),s("span",{staticClass:"line-number"},[a._v("61")]),s("br"),s("span",{staticClass:"line-number"},[a._v("62")]),s("br"),s("span",{staticClass:"line-number"},[a._v("63")]),s("br"),s("span",{staticClass:"line-number"},[a._v("64")]),s("br"),s("span",{staticClass:"line-number"},[a._v("65")]),s("br"),s("span",{staticClass:"line-number"},[a._v("66")]),s("br"),s("span",{staticClass:"line-number"},[a._v("67")]),s("br"),s("span",{staticClass:"line-number"},[a._v("68")]),s("br"),s("span",{staticClass:"line-number"},[a._v("69")]),s("br"),s("span",{staticClass:"line-number"},[a._v("70")]),s("br"),s("span",{staticClass:"line-number"},[a._v("71")]),s("br"),s("span",{staticClass:"line-number"},[a._v("72")]),s("br"),s("span",{staticClass:"line-number"},[a._v("73")]),s("br"),s("span",{staticClass:"line-number"},[a._v("74")]),s("br"),s("span",{staticClass:"line-number"},[a._v("75")]),s("br"),s("span",{staticClass:"line-number"},[a._v("76")]),s("br"),s("span",{staticClass:"line-number"},[a._v("77")]),s("br"),s("span",{staticClass:"line-number"},[a._v("78")]),s("br"),s("span",{staticClass:"line-number"},[a._v("79")]),s("br"),s("span",{staticClass:"line-number"},[a._v("80")]),s("br"),s("span",{staticClass:"line-number"},[a._v("81")]),s("br"),s("span",{staticClass:"line-number"},[a._v("82")]),s("br"),s("span",{staticClass:"line-number"},[a._v("83")]),s("br"),s("span",{staticClass:"line-number"},[a._v("84")]),s("br"),s("span",{staticClass:"line-number"},[a._v("85")]),s("br"),s("span",{staticClass:"line-number"},[a._v("86")]),s("br"),s("span",{staticClass:"line-number"},[a._v("87")]),s("br"),s("span",{staticClass:"line-number"},[a._v("88")]),s("br"),s("span",{staticClass:"line-number"},[a._v("89")]),s("br"),s("span",{staticClass:"line-number"},[a._v("90")]),s("br"),s("span",{staticClass:"line-number"},[a._v("91")]),s("br"),s("span",{staticClass:"line-number"},[a._v("92")]),s("br"),s("span",{staticClass:"line-number"},[a._v("93")]),s("br"),s("span",{staticClass:"line-number"},[a._v("94")]),s("br"),s("span",{staticClass:"line-number"},[a._v("95")]),s("br"),s("span",{staticClass:"line-number"},[a._v("96")]),s("br"),s("span",{staticClass:"line-number"},[a._v("97")]),s("br"),s("span",{staticClass:"line-number"},[a._v("98")]),s("br"),s("span",{staticClass:"line-number"},[a._v("99")]),s("br"),s("span",{staticClass:"line-number"},[a._v("100")]),s("br"),s("span",{staticClass:"line-number"},[a._v("101")]),s("br"),s("span",{staticClass:"line-number"},[a._v("102")]),s("br"),s("span",{staticClass:"line-number"},[a._v("103")]),s("br"),s("span",{staticClass:"line-number"},[a._v("104")]),s("br"),s("span",{staticClass:"line-number"},[a._v("105")]),s("br"),s("span",{staticClass:"line-number"},[a._v("106")]),s("br"),s("span",{staticClass:"line-number"},[a._v("107")]),s("br"),s("span",{staticClass:"line-number"},[a._v("108")]),s("br"),s("span",{staticClass:"line-number"},[a._v("109")]),s("br"),s("span",{staticClass:"line-number"},[a._v("110")]),s("br"),s("span",{staticClass:"line-number"},[a._v("111")]),s("br"),s("span",{staticClass:"line-number"},[a._v("112")]),s("br"),s("span",{staticClass:"line-number"},[a._v("113")]),s("br"),s("span",{staticClass:"line-number"},[a._v("114")]),s("br"),s("span",{staticClass:"line-number"},[a._v("115")]),s("br"),s("span",{staticClass:"line-number"},[a._v("116")]),s("br"),s("span",{staticClass:"line-number"},[a._v("117")]),s("br"),s("span",{staticClass:"line-number"},[a._v("118")]),s("br"),s("span",{staticClass:"line-number"},[a._v("119")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);