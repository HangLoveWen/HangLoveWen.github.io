(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{476:function(e,s,t){"use strict";t.r(s);var v=t(2),c=Object(v.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("1.定义中间件函数")]),e._v(" "),s("p",[e._v("可以通过如下的方式，定义一个最简单的中间件函数：")]),e._v(" "),s("p",[e._v("2.全局生效的中间件")]),e._v(" "),s("p",[e._v("客户端发起的任何请求，到达服务器后，都会触发的中间件，叫做全局生效的中间件。")]),e._v(" "),s("p",[e._v("通过调用app.use(中间件函数)，即可定义一个全局生效的中间件，示例代码如下：")]),e._v(" "),s("p",[e._v("3.定义全局中间件的简化形式")]),e._v(" "),s("p",[s("code",[e._v("app.use(fnction(req,res,next){")])]),e._v(" "),s("p",[s("code",[e._v("console.log('这是一个最简单的中间件函数')")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("`next()`\n")])])]),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[e._v("4.中间件的作用")]),e._v(" "),s("p",[e._v("多个中间件之间，共享同一份req和res，基于这样的特性，我们可以在上游的中间件中，统一为req或res对象添加自定义的属性或方法，供下游的中间件或路由进行使用。")]),e._v(" "),s("p",[e._v("5.定义多个全局中间就件")]),e._v(" "),s("p",[e._v("可以使用app.use()连续定义多个全局中间件。客户端到达服务期之后，会按照中间件定义的先后顺序依次进行调用，示例代码如下：")]),e._v(" "),s("p",[e._v("6.局部生效的中间件")]),e._v(" "),s("p",[e._v("不适用app.use()定义的中间件，叫做局部生效的中间件，示例代码如下：")]),e._v(" "),s("p",[s("code",[e._v("const m=function(req,res,next) {")])]),e._v(" "),s("p",[s("code",[e._v("console.log('局部生效的中间件')")])]),e._v(" "),s("p",[s("code",[e._v("next()")])]),e._v(" "),s("p",[s("code",[e._v("}")])]),e._v(" "),s("p",[s("code",[e._v("app.get('/',m,(req,res)=>{")])]),e._v(" "),s("p",[s("code",[e._v("res.send('服务器启动于：'+req.starttime)")])]),e._v(" "),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[e._v("7.定义多个局部中间件")]),e._v(" "),s("p",[e._v("可以在路由中，通过如下两种等价的方式，使用多个局部中间件：")]),e._v(" "),s("p",[s("code",[e._v("app.get('/',mw1,mw2,(req,res)=>{")])]),e._v(" "),s("p",[s("code",[e._v("res.send('服务器启动于：'+req.starttime)")])]),e._v(" "),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[s("code",[e._v("app.get('/',[mw1,mw2],(req,res)=>{")])]),e._v(" "),s("p",[s("code",[e._v("res.send('服务器启动于：'+req.starttime)")])]),e._v(" "),s("p",[s("code",[e._v("})")])]),e._v(" "),s("p",[e._v("8.了解中间件的5个使用注意事项")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("1.一定要在路由之前注册中间件\n\n2.客户端发送过来的请求，可以连续调用多个中间件进行处理\n\n3.执行完中间件的业务代码后，不要忘记调用next()函数\n\n4.\t为了防止代码逻辑混乱\n")])])]),s("p",[e._v("，调用next()函数后不要再写额外的代码")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("5.\t连续调用多个中间件之间，共享req和res对象\n")])])]),s("p",[s("img",{attrs:{src:"https://s1.imagehub.cc/images/2023/02/01/dcb4f3286d146d381392f1cebd6b0d57.png",alt:"dcb4f3286d146d381392f1cebd6b0d57.png"}}),e._v(" "),s("img",{attrs:{src:"https://s1.imagehub.cc/images/2023/02/01/f39b6bfa95f1b910d23c478848e40f62.png",alt:"f39b6bfa95f1b910d23c478848e40f62.png"}}),e._v(" "),s("img",{attrs:{src:"https://s1.imagehub.cc/images/2023/02/01/ccb398c3cd8e33dd45490fa6a8ec068f.png",alt:"ccb398c3cd8e33dd45490fa6a8ec068f.png"}}),e._v(" "),s("img",{attrs:{src:"https://s1.imagehub.cc/images/2023/02/01/4adae485aab91e7d21636f485d577c16.png",alt:"4adae485aab91e7d21636f485d577c16.png"}}),e._v(" "),s("img",{attrs:{src:"https://s1.imagehub.cc/images/2023/02/01/16e19bb764340716e6eb481fc982cf2d.png",alt:"16e19bb764340716e6eb481fc982cf2d.png"}})])])}),[],!1,null,null,null);s.default=c.exports}}]);